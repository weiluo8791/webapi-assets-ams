{"version":3,"file":"index.js","sourceRoot":"D:/Programming/git/webapi-server-nodejs-v1.2/source/","sources":["protocols/native_handlers/AMSApis/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RestApiRequestError } from '../../../errors';\r\nimport { Handler } from '../Handler';\r\nimport { Result } from '../../Protocol';\r\nimport { RequestContext } from '../../../RequestContext';\r\n\r\n// import * as http from 'http';\r\n// import * as https from 'https';\r\nimport { createConnection } from 'net';\r\n// import { resolve } from 'url';\r\n// import * as net from 'net';\r\n// import * as StreamBuffers from 'stream-buffers';\r\n// import * as URL from 'url';\r\n\r\nasync function getAmsData(type: string) {\r\n    let HOST = '172.25.0.2';\r\n    let PORT = 1022;\r\n    let totalData = [];\r\n\r\n    totalData = [];\r\n    return new Promise((resolve, reject) => {\r\n        let client = createConnection({ host: HOST, port: PORT }, () => {\r\n            // 'connect' listener\r\n            // console.log('connected to server!');\r\n            let message = Buffer.from('0009000b52454d4f54455f41444452000d3137322e33302e35342e313236000b52454d4f54455f484f5354000d3137322e33302e35342e313236000f485454505f555345525f4147454e5400734d6f7a696c6c612f352e30202857696e646f7773204e542031302e303b2057696e36343b2078363429204170706c655765624b69742f3533372e333620284b48544d4c2c206c696b65204765636b6f29204368726f6d652f36332e302e333233392e313332205361666172692f3533372e3336000b485454505f434f4f4b4945019768756273706f7475746b3d61313033633763316232616239613033333932306539376433376634633537393b205f67613d4741312e322e3631353734363238362e313530383530393836363b205f6769643d4741312e322e313438303439323737392e313531363131333330383b205f5f687374633d3138383835393633362e61313033633763316232616239613033333932306539376433376634633537392e313530383936323436343831322e313531343330393238323730382e313531363133383435343530352e363b205f5f756e616d3d366434336436342d31363039336464653162332d32613961383532622d343b205f5f75746d613d3138383835393633362e3631353734363238362e313530383530393836362e313531363134303437312e313531363134303437312e313b205f5f75746d7a3d3138383835393633362e313531363134303437312e312e312e75746d6373723d28646972656374297c75746d63636e3d28646972656374297c75746d636d643d286e6f6e65293b20706373743d454b746f57796f4a4f3533343036350005485454505300036f6666000b5345525645525f504f52540002383000125345525645525f504f52545f53454355524500013000064e54555345520011776c756f406d656469746563682e636f6d00045459504500085775735369746573', 'hex');\r\n            client.write(message);\r\n        });\r\n        client.on('data', (data) => {\r\n            // console.log(`Received ${data.length} bytes of data.`);\r\n            totalData.push(data);\r\n        });\r\n        client.on('close', () => {\r\n            // console.log('disconnected from server');\r\n            let data = Buffer.concat(totalData);\r\n            client.destroy();\r\n            resolve(data);\r\n        });\r\n    });\r\n}\r\n\r\nfunction processAmsData(buf) {\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = 0;\r\n    let header = '';\r\n    let resData = '';\r\n    // process for header\r\n    while (i < buf.length) {\r\n        if (buf.readIntBE(i, 1) === 2) {\r\n            j = i + 1; // value length position\r\n            k = buf.readIntBE(j, 1); // value length\r\n            // header terminate\r\n            if (k === 1 && buf.readInt8(j + 1) === 10) {\r\n                i = j + 2;\r\n                break;\r\n            }\r\n            let value = buf.slice(j + 1, j + k + 1);\r\n            header += value.toString();\r\n        }\r\n        i = j + k + 1;\r\n    }\r\n    // process for body\r\n    while (i < buf.length) {\r\n        if (buf.readIntBE(i, 1) === 2) {\r\n            j = i + 1; // value length position\r\n            k = buf.readIntBE(j, 1); // value length\r\n            let value = buf.slice(j + 1, j + k + 1);\r\n            resData += value.toString();\r\n        }\r\n        // data terminate\r\n        if (buf.readIntBE(i, 1) === 1) {\r\n            break;\r\n        }\r\n        i = j + k + 1;\r\n    }\r\n    // console.log('header', header);\r\n    // console.log('data', resData);\r\n    return JSON.parse(resData);\r\n}\r\n\r\nexport class AMSApis extends Handler {\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_get(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        let task: string;\r\n        let TYPE: string;\r\n\r\n        Promise.all([ctx.apiInfo])\r\n            .then(([apiInfo]) => {\r\n                task = apiInfo.routeParams['Task'];\r\n                TYPE = ctx.query['TYPE'];\r\n                return getAmsData(TYPE);\r\n            })\r\n            .then(a => {\r\n                let jdata = processAmsData(a);\r\n                const json = {\r\n                    resource: 'v1/resource/ams-view/_version/1/',\r\n                    uri: 'v1/ams-view/',\r\n                    Task: task,\r\n                    displayName: jdata.displayName,\r\n                    email: jdata.email,\r\n                    sites: jdata.sites\r\n                };\r\n                return { json, statusCode: 200 };\r\n            })\r\n            .then(resolvePromise, rejectPromise);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_put(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_patch(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_delete(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_post(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_head(dctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n}\r\n\r\nexport default AMSApis;"]}