{"version":3,"file":"index.js","sourceRoot":"D:/Programming/git/webapi-server-nodejs-v1.2/source/","sources":["protocols/native_handlers/AMSApis/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RestApiRequestError } from '../../../errors';\r\nimport { Handler } from '../Handler';\r\nimport { Result } from '../../Protocol';\r\nimport { RequestContext } from '../../../RequestContext';\r\n\r\n// import * as http from 'http';\r\n// import * as https from 'https';\r\nimport { createConnection } from 'net';\r\n// import { resolve } from 'url';\r\n// import * as net from 'net';\r\n// import * as StreamBuffers from 'stream-buffers';\r\n// import * as URL from 'url';\r\nimport * as os from 'os';\r\n\r\n// constant for name length\r\nconst REMOTE_ADDR_L = '000b';\r\nconst REMOTE_HOST_L = '000b';\r\nconst HTTP_USER_AGENT_L = '000f';\r\nconst HTTPS_L = '0005';\r\nconst SERVER_PORT_L = '000b';\r\nconst SERVER_PORT_SECURE_L = '0012';\r\nconst NTUSER_L = '0006';\r\nconst TYPE_L = '0004';\r\nconst task_L = '0004';\r\n\r\n// interface for AMS package\r\ninterface AmsPackage {\r\n    REMOTE_ADDR: string;\r\n    REMOTE_HOST: string;\r\n    HTTP_USER_AGENT: string;\r\n    HTTPS: string;\r\n    SERVER_PORT: string;\r\n    SERVER_PORT_SECURE: string;\r\n    NTUSER: string;\r\n    TYPE: string;\r\n    task: string;\r\n    AMS_PARAM_TOTAL: string;\r\n}\r\n\r\nasync function getAmsData(amsPackage: string) {\r\n    const HOST = '172.25.0.2';\r\n    const PORT = 1022;\r\n    let totalData = [];\r\n\r\n    totalData = [];\r\n    return new Promise((resolve, reject) => {\r\n        let client = createConnection({ host: HOST, port: PORT }, () => {\r\n            // 'connect' listener\r\n            // console.log('connected to server!');\r\n            let message = Buffer.from(amsPackage, 'hex');\r\n            client.write(message);\r\n        });\r\n        client.on('data', (data) => {\r\n            // console.log(`Received ${data.length} bytes of data.`);\r\n            totalData.push(data);\r\n        });\r\n        client.on('close', () => {\r\n            // console.log('disconnected from server');\r\n            let data = Buffer.concat(totalData);\r\n            client.destroy();\r\n            resolve(data);\r\n        });\r\n    });\r\n}\r\n\r\nfunction processAmsData(buf) {\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = 0;\r\n    let header = '';\r\n    let resData = '';\r\n    // process for header\r\n    while (i < buf.length) {\r\n        if (buf.readIntBE(i, 1) === 2) {\r\n            j = i + 1; // value length position\r\n            k = buf.readIntBE(j, 1); // value length\r\n            // header terminate\r\n            if (k === 1 && buf.readInt8(j + 1) === 10) {\r\n                i = j + 2;\r\n                break;\r\n            }\r\n            let value = buf.slice(j + 1, j + k + 1);\r\n            header += value.toString();\r\n        }\r\n        i = j + k + 1;\r\n    }\r\n    // process for body\r\n    while (i < buf.length) {\r\n        if (buf.readIntBE(i, 1) === 2) {\r\n            j = i + 1; // value length position\r\n            k = buf.readIntBE(j, 1); // value length\r\n            let value = buf.slice(j + 1, j + k + 1);\r\n            resData += value.toString();\r\n        }\r\n        // data terminate\r\n        if (buf.readIntBE(i, 1) === 1) {\r\n            break;\r\n        }\r\n        i = j + k + 1;\r\n    }\r\n\r\n    return JSON.parse(resData);\r\n}\r\n\r\n// return localIP in array\r\nfunction getLocalIp() {\r\n    let interfaces = os.networkInterfaces();\r\n    let addresses = [];\r\n    for (let k in interfaces) {\r\n        for (let k2 in interfaces[k]) {\r\n            let address = interfaces[k][k2];\r\n            if (address.family === 'IPv4' && !address.internal) {\r\n                addresses.push(address.address);\r\n            }\r\n        }\r\n    }\r\n    return addresses;\r\n}\r\n\r\n// for length in the format of hex 0000\r\nfunction hex16(val) {\r\n    val &= 0xFFFF;\r\n    let hex = val.toString(16).toUpperCase();\r\n    return ('0000' + hex).slice(-4);\r\n}\r\n\r\n// from string  in for format of hex 00\r\nfunction stringToHex(str) {\r\n    let hex = '';\r\n    for (let i = 0; i < str.length; i++) {\r\n        hex += '' + str.charCodeAt(i).toString(16);\r\n    }\r\n    return hex;\r\n}\r\n\r\nfunction packageAmsSend(task: string, Type: string) {\r\n    let localIp = getLocalIp()[0];\r\n    let amsPackage: AmsPackage = {\r\n        REMOTE_ADDR: localIp,\r\n        REMOTE_HOST: localIp,\r\n        HTTP_USER_AGENT: 'PostmanRuntime/7.1.1',\r\n        HTTPS: 'off',\r\n        SERVER_PORT: '80',\r\n        SERVER_PORT_SECURE: '0',\r\n        NTUSER: 'WLUO@meditech.com',\r\n        TYPE: Type,\r\n        task: task,\r\n        AMS_PARAM_TOTAL: '0009'\r\n    };\r\n\r\n    let amsPacket = '';\r\n    amsPacket += amsPackage.AMS_PARAM_TOTAL;\r\n    amsPacket += REMOTE_ADDR_L + stringToHex('REMOTE_ADDR') + hex16(amsPackage.REMOTE_ADDR.length) + stringToHex(amsPackage.REMOTE_ADDR);\r\n    amsPacket += REMOTE_HOST_L + stringToHex('REMOTE_HOST') + hex16(amsPackage.REMOTE_HOST.length) + stringToHex(amsPackage.REMOTE_HOST);\r\n    amsPacket += HTTP_USER_AGENT_L + stringToHex('HTTP_USER_AGENT') + hex16(amsPackage.HTTP_USER_AGENT.length) + stringToHex(amsPackage.HTTP_USER_AGENT);\r\n    amsPacket += HTTPS_L + stringToHex('HTTPS') + hex16(amsPackage.HTTPS.length) + stringToHex(amsPackage.HTTPS);\r\n    amsPacket += SERVER_PORT_L + stringToHex('SERVER_PORT') + hex16(amsPackage.SERVER_PORT.length) + stringToHex(amsPackage.SERVER_PORT);\r\n    amsPacket += SERVER_PORT_SECURE_L + stringToHex('SERVER_PORT_SECURE') + hex16(amsPackage.SERVER_PORT_SECURE.length) + stringToHex(amsPackage.SERVER_PORT_SECURE);\r\n    amsPacket += NTUSER_L + stringToHex('NTUSER') + hex16(amsPackage.NTUSER.length) + stringToHex(amsPackage.NTUSER);\r\n    amsPacket += TYPE_L + stringToHex('TYPE') + hex16(amsPackage.TYPE.length) + stringToHex(amsPackage.TYPE);\r\n    amsPacket += task_L + stringToHex('task') + hex16(amsPackage.task.length) + stringToHex(amsPackage.task);\r\n\r\n    return amsPacket;\r\n}\r\n\r\nexport class AMSApis extends Handler {\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_get(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        let task: string;\r\n        let TYPE: string;\r\n\r\n        Promise.all([ctx.apiInfo])\r\n            .then(([apiInfo]) => {\r\n                task = apiInfo.routeParams['task'];\r\n                TYPE = ctx.query['TYPE'];\r\n                return packageAmsSend(task, TYPE);\r\n            })\r\n            .then(p => {\r\n                return getAmsData(p);\r\n            })\r\n            .then(a => {\r\n                let jdata = processAmsData(a);\r\n                const json = {\r\n                    resource: 'v1/resource/ams-view/_version/1/',\r\n                    uri: 'v1/ams-view/',\r\n                    task: task,\r\n                    site: jdata.site,\r\n                    module: jdata.module,\r\n                    'ams.task.entry.time': jdata['ams.task.entry.time'],\r\n                    'task.status': jdata['task.status'],\r\n                    'task.priority': jdata['task.priority'],\r\n                    'ams.task.patient.safety': jdata['ams.task.patient.safety'],\r\n                    'ams.task.reference.number': jdata['ams.task.reference.number'],\r\n                    'ams.task.description': jdata['ams.task.description'],\r\n                    'task.request.type': jdata['task.request.type'],\r\n                    'ams.task.live.system': jdata['ams.task.live.system'],\r\n                    'ams.task.test.system': jdata['ams.task.test.system'],\r\n                    'ams.task.update.system': jdata['ams.task.update.system'],\r\n                    'ams.task.contact': jdata['ams.task.contact'],\r\n                    'ams.task.contact.phone': jdata['ams.task.contact.phone'],\r\n                    'module.notifications': jdata['module.notifications'],\r\n                    'task.received.by': jdata['task.received.by'],\r\n                    'task.application.specialist': jdata['task.application.specialist'],\r\n                    'task.other.staff': jdata['task.other.staff'],\r\n                    'task.last.edit': jdata['task.last.edit']\r\n                };\r\n                return { json, statusCode: 200 };\r\n            })\r\n            .then(resolvePromise, rejectPromise);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_put(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_patch(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_delete(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_post(ctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _execute_head(dctx: RequestContext, resolvePromise: (result: Result) => void, rejectPromise: (err: any) => void): void {\r\n\r\n        throw new RestApiRequestError(405);\r\n    }\r\n}\r\n\r\nexport default AMSApis;"]}